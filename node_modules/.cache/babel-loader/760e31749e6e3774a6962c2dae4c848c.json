{"ast":null,"code":"var _jsxFileName = \"/home/fazal/Documents/claudius/D3-charts/src/LollipopChart5.js\";\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport { lab } from 'd3';\n\nconst moment = require('moment');\n\nconst LollipopChart = props => {\n  useEffect(() => {\n    drawChart();\n  });\n\n  function drawChart() {\n    var margin = {\n      top: 10,\n      right: 30,\n      bottom: 30,\n      left: 60\n    },\n        width = 460 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom; // append the svg object to the body of the page\n\n    var svg = d3.select(\"#my_dataviz\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); //Read the data\n\n    d3.csv(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered_comma.csv\", // When reading the csv, I must format variables:\n    function (d) {\n      return {\n        date: d3.timeParse(\"%Y-%m-%d\")(d.date),\n        value: d.value\n      };\n    }, // Now I can use this dataset:\n    function (data) {\n      // Add X axis --> it is a date format\n      var x = d3.scaleTime().domain(d3.extent(data, function (d) {\n        return d.date;\n      })).range([0, width]);\n      xAxis = svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); // Add Y axis\n\n      var y = d3.scaleLinear().domain([0, d3.max(data, function (d) {\n        return +d.value;\n      })]).range([height, 0]);\n      yAxis = svg.append(\"g\").call(d3.axisLeft(y)); // Add a clipPath: everything out of this area won't be drawn.\n\n      var clip = svg.append(\"defs\").append(\"svg:clipPath\").attr(\"id\", \"clip\").append(\"svg:rect\").attr(\"width\", width).attr(\"height\", height).attr(\"x\", 0).attr(\"y\", 0); // Add brushing\n\n      var brush = d3.brushX() // Add the brush feature using the d3.brush function\n      .extent([[0, 0], [width, height]]) // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area\n      .on(\"end\", updateChart); // Each time the brush selection changes, trigger the 'updateChart' function\n      // Create the line variable: where both the line and the brush take place\n\n      var line = svg.append('g').attr(\"clip-path\", \"url(#clip)\"); // Add the line\n\n      line.append(\"path\").datum(data).attr(\"class\", \"line\") // I add the class line to be able to modify this line later on.\n      .attr(\"fill\", \"none\").attr(\"stroke\", \"steelblue\").attr(\"stroke-width\", 1.5).attr(\"d\", d3.line().x(function (d) {\n        return x(d.date);\n      }).y(function (d) {\n        return y(d.value);\n      })); // Add the brushing\n\n      line.append(\"g\").attr(\"class\", \"brush\").call(brush); // A function that set idleTimeOut to null\n\n      var idleTimeout;\n\n      function idled() {\n        idleTimeout = null;\n      } // A function that update the chart for given boundaries\n\n\n      function updateChart() {\n        // What are the selected boundaries?\n        extent = d3.event.selection; // If no selection, back to initial coordinate. Otherwise, update X axis domain\n\n        if (!extent) {\n          if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit\n\n          x.domain([4, 8]);\n        } else {\n          x.domain([x.invert(extent[0]), x.invert(extent[1])]);\n          line.select(\".brush\").call(brush.move, null); // This remove the grey brush area as soon as the selection has been done\n        } // Update axis and line position\n\n\n        xAxis.transition().duration(1000).call(d3.axisBottom(x));\n        line.select('.line').transition().duration(1000).attr(\"d\", d3.line().x(function (d) {\n          return x(d.date);\n        }).y(function (d) {\n          return y(d.value);\n        }));\n      } // If user double click, reinitialize the chart\n\n\n      svg.on(\"dblclick\", function () {\n        x.domain(d3.extent(data, function (d) {\n          return d.date;\n        }));\n        xAxis.transition().call(d3.axisBottom(x));\n        line.select('.line').transition().attr(\"d\", d3.line().x(function (d) {\n          return x(d.date);\n        }).y(function (d) {\n          return y(d.value);\n        }));\n      });\n    });\n  }\n\n  const d3Container = useRef(null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d3-lollipop-chart\",\n    width: 996,\n    height: 444,\n    ref: d3Container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default LollipopChart;","map":{"version":3,"sources":["/home/fazal/Documents/claudius/D3-charts/src/LollipopChart5.js"],"names":["React","useRef","useEffect","d3","lab","moment","require","LollipopChart","props","drawChart","margin","top","right","bottom","left","width","height","svg","select","append","attr","csv","d","date","timeParse","value","data","x","scaleTime","domain","extent","range","xAxis","call","axisBottom","y","scaleLinear","max","yAxis","axisLeft","clip","brush","brushX","on","updateChart","line","datum","idleTimeout","idled","event","selection","setTimeout","invert","move","transition","duration","d3Container"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,SAASC,GAAT,QAAoB,IAApB;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAGA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC7BN,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,SAAS;AACZ,GAFQ,CAAT;;AAIA,WAASA,SAAT,GAAqB;AACjB,QAAIC,MAAM,GAAG;AAACC,MAAAA,GAAG,EAAE,EAAN;AAAUC,MAAAA,KAAK,EAAE,EAAjB;AAAqBC,MAAAA,MAAM,EAAE,EAA7B;AAAiCC,MAAAA,IAAI,EAAE;AAAvC,KAAb;AAAA,QACJC,KAAK,GAAG,MAAML,MAAM,CAACI,IAAb,GAAoBJ,MAAM,CAACE,KAD/B;AAAA,QAEJI,MAAM,GAAG,MAAMN,MAAM,CAACC,GAAb,GAAmBD,MAAM,CAACG,MAF/B,CADiB,CAKzB;;AACA,QAAII,GAAG,GAAGd,EAAE,CAACe,MAAH,CAAU,aAAV,EACPC,MADO,CACA,KADA,EAELC,IAFK,CAEA,OAFA,EAESL,KAAK,GAAGL,MAAM,CAACI,IAAf,GAAsBJ,MAAM,CAACE,KAFtC,EAGLQ,IAHK,CAGA,QAHA,EAGUJ,MAAM,GAAGN,MAAM,CAACC,GAAhB,GAAsBD,MAAM,CAACG,MAHvC,EAIPM,MAJO,CAIA,GAJA,EAKLC,IALK,CAKA,WALA,EAMA,eAAeV,MAAM,CAACI,IAAtB,GAA6B,GAA7B,GAAmCJ,MAAM,CAACC,GAA1C,GAAgD,GANhD,CAAV,CANyB,CAczB;;AACAR,IAAAA,EAAE,CAACkB,GAAH,CAAO,uGAAP,EAEE;AACA,cAASC,CAAT,EAAW;AACT,aAAO;AAAEC,QAAAA,IAAI,EAAGpB,EAAE,CAACqB,SAAH,CAAa,UAAb,EAAyBF,CAAC,CAACC,IAA3B,CAAT;AAA2CE,QAAAA,KAAK,EAAGH,CAAC,CAACG;AAArD,OAAP;AACD,KALH,EAOE;AACA,cAASC,IAAT,EAAe;AAEb;AACA,UAAIC,CAAC,GAAGxB,EAAE,CAACyB,SAAH,GACLC,MADK,CACE1B,EAAE,CAAC2B,MAAH,CAAUJ,IAAV,EAAgB,UAASJ,CAAT,EAAY;AAAE,eAAOA,CAAC,CAACC,IAAT;AAAgB,OAA9C,CADF,EAELQ,KAFK,CAEC,CAAE,CAAF,EAAKhB,KAAL,CAFD,CAAR;AAGAiB,MAAAA,KAAK,GAAGf,GAAG,CAACE,MAAJ,CAAW,GAAX,EACLC,IADK,CACA,WADA,EACa,iBAAiBJ,MAAjB,GAA0B,GADvC,EAELiB,IAFK,CAEA9B,EAAE,CAAC+B,UAAH,CAAcP,CAAd,CAFA,CAAR,CANa,CAUb;;AACA,UAAIQ,CAAC,GAAGhC,EAAE,CAACiC,WAAH,GACLP,MADK,CACE,CAAC,CAAD,EAAI1B,EAAE,CAACkC,GAAH,CAAOX,IAAP,EAAa,UAASJ,CAAT,EAAY;AAAE,eAAO,CAACA,CAAC,CAACG,KAAV;AAAkB,OAA7C,CAAJ,CADF,EAELM,KAFK,CAEC,CAAEf,MAAF,EAAU,CAAV,CAFD,CAAR;AAGAsB,MAAAA,KAAK,GAAGrB,GAAG,CAACE,MAAJ,CAAW,GAAX,EACLc,IADK,CACA9B,EAAE,CAACoC,QAAH,CAAYJ,CAAZ,CADA,CAAR,CAda,CAiBb;;AACA,UAAIK,IAAI,GAAGvB,GAAG,CAACE,MAAJ,CAAW,MAAX,EAAmBA,MAAnB,CAA0B,cAA1B,EACNC,IADM,CACD,IADC,EACK,MADL,EAEND,MAFM,CAEC,UAFD,EAGNC,IAHM,CAGD,OAHC,EAGQL,KAHR,EAINK,IAJM,CAID,QAJC,EAISJ,MAJT,EAKNI,IALM,CAKD,GALC,EAKI,CALJ,EAMNA,IANM,CAMD,GANC,EAMI,CANJ,CAAX,CAlBa,CA0Bb;;AACA,UAAIqB,KAAK,GAAGtC,EAAE,CAACuC,MAAH,GAA8B;AAA9B,OACPZ,MADO,CACC,CAAE,CAAC,CAAD,EAAG,CAAH,CAAF,EAAS,CAACf,KAAD,EAAOC,MAAP,CAAT,CADD,EAC8B;AAD9B,OAEP2B,EAFO,CAEJ,KAFI,EAEGC,WAFH,CAAZ,CA3Ba,CA6B6B;AAE1C;;AACA,UAAIC,IAAI,GAAG5B,GAAG,CAACE,MAAJ,CAAW,GAAX,EACRC,IADQ,CACH,WADG,EACU,YADV,CAAX,CAhCa,CAmCb;;AACAyB,MAAAA,IAAI,CAAC1B,MAAL,CAAY,MAAZ,EACG2B,KADH,CACSpB,IADT,EAEGN,IAFH,CAEQ,OAFR,EAEiB,MAFjB,EAE0B;AAF1B,OAGGA,IAHH,CAGQ,MAHR,EAGgB,MAHhB,EAIGA,IAJH,CAIQ,QAJR,EAIkB,WAJlB,EAKGA,IALH,CAKQ,cALR,EAKwB,GALxB,EAMGA,IANH,CAMQ,GANR,EAMajB,EAAE,CAAC0C,IAAH,GACRlB,CADQ,CACN,UAASL,CAAT,EAAY;AAAE,eAAOK,CAAC,CAACL,CAAC,CAACC,IAAH,CAAR;AAAkB,OAD1B,EAERY,CAFQ,CAEN,UAASb,CAAT,EAAY;AAAE,eAAOa,CAAC,CAACb,CAAC,CAACG,KAAH,CAAR;AAAmB,OAF3B,CANb,EApCa,CA+Cb;;AACAoB,MAAAA,IAAI,CACD1B,MADH,CACU,GADV,EAEKC,IAFL,CAEU,OAFV,EAEmB,OAFnB,EAGKa,IAHL,CAGUQ,KAHV,EAhDa,CAqDb;;AACA,UAAIM,WAAJ;;AACA,eAASC,KAAT,GAAiB;AAAED,QAAAA,WAAW,GAAG,IAAd;AAAqB,OAvD3B,CAyDb;;;AACA,eAASH,WAAT,GAAuB;AAErB;AACAd,QAAAA,MAAM,GAAG3B,EAAE,CAAC8C,KAAH,CAASC,SAAlB,CAHqB,CAKrB;;AACA,YAAG,CAACpB,MAAJ,EAAW;AACT,cAAI,CAACiB,WAAL,EAAkB,OAAOA,WAAW,GAAGI,UAAU,CAACH,KAAD,EAAQ,GAAR,CAA/B,CADT,CACsD;;AAC/DrB,UAAAA,CAAC,CAACE,MAAF,CAAS,CAAE,CAAF,EAAI,CAAJ,CAAT;AACD,SAHD,MAGK;AACHF,UAAAA,CAAC,CAACE,MAAF,CAAS,CAAEF,CAAC,CAACyB,MAAF,CAAStB,MAAM,CAAC,CAAD,CAAf,CAAF,EAAuBH,CAAC,CAACyB,MAAF,CAAStB,MAAM,CAAC,CAAD,CAAf,CAAvB,CAAT;AACAe,UAAAA,IAAI,CAAC3B,MAAL,CAAY,QAAZ,EAAsBe,IAAtB,CAA2BQ,KAAK,CAACY,IAAjC,EAAuC,IAAvC,EAFG,CAE0C;AAC9C,SAZoB,CAcrB;;;AACArB,QAAAA,KAAK,CAACsB,UAAN,GAAmBC,QAAnB,CAA4B,IAA5B,EAAkCtB,IAAlC,CAAuC9B,EAAE,CAAC+B,UAAH,CAAcP,CAAd,CAAvC;AACAkB,QAAAA,IAAI,CACC3B,MADL,CACY,OADZ,EAEKoC,UAFL,GAGKC,QAHL,CAGc,IAHd,EAIKnC,IAJL,CAIU,GAJV,EAIejB,EAAE,CAAC0C,IAAH,GACRlB,CADQ,CACN,UAASL,CAAT,EAAY;AAAE,iBAAOK,CAAC,CAACL,CAAC,CAACC,IAAH,CAAR;AAAkB,SAD1B,EAERY,CAFQ,CAEN,UAASb,CAAT,EAAY;AAAE,iBAAOa,CAAC,CAACb,CAAC,CAACG,KAAH,CAAR;AAAmB,SAF3B,CAJf;AAQD,OAlFY,CAoFb;;;AACAR,MAAAA,GAAG,CAAC0B,EAAJ,CAAO,UAAP,EAAkB,YAAU;AAC1BhB,QAAAA,CAAC,CAACE,MAAF,CAAS1B,EAAE,CAAC2B,MAAH,CAAUJ,IAAV,EAAgB,UAASJ,CAAT,EAAY;AAAE,iBAAOA,CAAC,CAACC,IAAT;AAAgB,SAA9C,CAAT;AACAS,QAAAA,KAAK,CAACsB,UAAN,GAAmBrB,IAAnB,CAAwB9B,EAAE,CAAC+B,UAAH,CAAcP,CAAd,CAAxB;AACAkB,QAAAA,IAAI,CACD3B,MADH,CACU,OADV,EAEGoC,UAFH,GAGGlC,IAHH,CAGQ,GAHR,EAGajB,EAAE,CAAC0C,IAAH,GACRlB,CADQ,CACN,UAASL,CAAT,EAAY;AAAE,iBAAOK,CAAC,CAACL,CAAC,CAACC,IAAH,CAAR;AAAkB,SAD1B,EAERY,CAFQ,CAEN,UAASb,CAAT,EAAY;AAAE,iBAAOa,CAAC,CAACb,CAAC,CAACG,KAAH,CAAR;AAAmB,SAF3B,CAHb;AAOD,OAVD;AAYH,KAzGD;AA2GK;;AAED,QAAM+B,WAAW,GAAGvD,MAAM,CAAC,IAAD,CAA1B;AAEA,sBACI;AACI,IAAA,SAAS,EAAC,mBADd;AAEI,IAAA,KAAK,EAAE,GAFX;AAGI,IAAA,MAAM,EAAE,GAHZ;AAII,IAAA,GAAG,EAAEuD,WAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAQH,CA3ID;;AA6IA,eAAejD,aAAf","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport { lab } from 'd3';\nconst moment = require('moment');\n\n\nconst LollipopChart = (props) => {\n    useEffect(() => {\n        drawChart();\n    });\n\n    function drawChart() {\n        var margin = {top: 10, right: 30, bottom: 30, left: 60},\n    width = 460 - margin.left - margin.right,\n    height = 400 - margin.top - margin.bottom;\n\n// append the svg object to the body of the page\nvar svg = d3.select(\"#my_dataviz\")\n  .append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n    .attr(\"transform\",\n          \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n//Read the data\nd3.csv(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered_comma.csv\",\n\n  // When reading the csv, I must format variables:\n  function(d){\n    return { date : d3.timeParse(\"%Y-%m-%d\")(d.date), value : d.value }\n  },\n\n  // Now I can use this dataset:\n  function(data) {\n\n    // Add X axis --> it is a date format\n    var x = d3.scaleTime()\n      .domain(d3.extent(data, function(d) { return d.date; }))\n      .range([ 0, width ]);\n    xAxis = svg.append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(d3.axisBottom(x));\n\n    // Add Y axis\n    var y = d3.scaleLinear()\n      .domain([0, d3.max(data, function(d) { return +d.value; })])\n      .range([ height, 0 ]);\n    yAxis = svg.append(\"g\")\n      .call(d3.axisLeft(y));\n\n    // Add a clipPath: everything out of this area won't be drawn.\n    var clip = svg.append(\"defs\").append(\"svg:clipPath\")\n        .attr(\"id\", \"clip\")\n        .append(\"svg:rect\")\n        .attr(\"width\", width )\n        .attr(\"height\", height )\n        .attr(\"x\", 0)\n        .attr(\"y\", 0);\n\n    // Add brushing\n    var brush = d3.brushX()                   // Add the brush feature using the d3.brush function\n        .extent( [ [0,0], [width,height] ] )  // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area\n        .on(\"end\", updateChart)               // Each time the brush selection changes, trigger the 'updateChart' function\n\n    // Create the line variable: where both the line and the brush take place\n    var line = svg.append('g')\n      .attr(\"clip-path\", \"url(#clip)\")\n\n    // Add the line\n    line.append(\"path\")\n      .datum(data)\n      .attr(\"class\", \"line\")  // I add the class line to be able to modify this line later on.\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"steelblue\")\n      .attr(\"stroke-width\", 1.5)\n      .attr(\"d\", d3.line()\n        .x(function(d) { return x(d.date) })\n        .y(function(d) { return y(d.value) })\n        )\n\n    // Add the brushing\n    line\n      .append(\"g\")\n        .attr(\"class\", \"brush\")\n        .call(brush);\n\n    // A function that set idleTimeOut to null\n    var idleTimeout\n    function idled() { idleTimeout = null; }\n\n    // A function that update the chart for given boundaries\n    function updateChart() {\n\n      // What are the selected boundaries?\n      extent = d3.event.selection\n\n      // If no selection, back to initial coordinate. Otherwise, update X axis domain\n      if(!extent){\n        if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit\n        x.domain([ 4,8])\n      }else{\n        x.domain([ x.invert(extent[0]), x.invert(extent[1]) ])\n        line.select(\".brush\").call(brush.move, null) // This remove the grey brush area as soon as the selection has been done\n      }\n\n      // Update axis and line position\n      xAxis.transition().duration(1000).call(d3.axisBottom(x))\n      line\n          .select('.line')\n          .transition()\n          .duration(1000)\n          .attr(\"d\", d3.line()\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n          )\n    }\n\n    // If user double click, reinitialize the chart\n    svg.on(\"dblclick\",function(){\n      x.domain(d3.extent(data, function(d) { return d.date; }))\n      xAxis.transition().call(d3.axisBottom(x))\n      line\n        .select('.line')\n        .transition()\n        .attr(\"d\", d3.line()\n          .x(function(d) { return x(d.date) })\n          .y(function(d) { return y(d.value) })\n      )\n    });\n\n})\n\n    }\n\n    const d3Container = useRef(null);\n\n    return (\n        <div\n            className=\"d3-lollipop-chart\"\n            width={996}\n            height={444}\n            ref={d3Container}\n        ></div>\n    );\n}\n\nexport default LollipopChart;"]},"metadata":{},"sourceType":"module"}