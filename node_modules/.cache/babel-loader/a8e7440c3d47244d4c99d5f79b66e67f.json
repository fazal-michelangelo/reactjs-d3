{"ast":null,"code":"var _jsxFileName = \"/home/fazal/Documents/reactjs/inbox-pivot/src/DDDHooksChart.js\";\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\n/* Component */\n\nexport const MyD3Component = props => {\n  /* The useRef Hook creates a variable that \"holds on\" to a value across rendering\n     passes. In this case it will hold our component's SVG DOM element. It's\n     initialized null and React will assign it later (see the return statement) */\n  const d3Container = useRef(null);\n  /* The useEffect Hook is for running side effects outside of React,\n     for instance inserting elements into the DOM using D3 */\n\n  useEffect(() => {\n    if (props.data && d3Container.current) {\n      const svg = d3.select(d3Container.current); // Bind D3 data\n\n      const update = svg.append('g').selectAll('text').data(props.data); // Enter new D3 elements\n\n      update.enter().append('text').attr('x', (d, i) => i * 25).attr('y', 40).style('font-size', 24).text(d => d); // Update existing D3 elements\n\n      update.attr('x', (d, i) => i * 40).text(d => d); // Remove old D3 elements\n\n      update.exit().remove();\n    }\n  },\n  /*\n      useEffect has a dependency array (below). It's a list of dependency\n      variables for this useEffect block. The block will run after mount\n      and whenever any of these variables change. We still have to check\n      if the variables are valid, but we do not have to compare old props\n      to next props to decide whether to rerender.\n  */\n  [props.data, d3Container.current]);\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    className: \"d3-component\",\n    width: 400,\n    height: 200,\n    ref: d3Container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  });\n};\n/* App */\n\nexport const MyApp = () => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"my-app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MyD3Component, {\n    data: [1, 2, 3],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }));\n};","map":{"version":3,"sources":["/home/fazal/Documents/reactjs/inbox-pivot/src/DDDHooksChart.js"],"names":["React","useRef","useEffect","d3","MyD3Component","props","d3Container","data","current","svg","select","update","append","selectAll","enter","attr","d","i","style","text","exit","remove","MyApp"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AAEA;;AACA,OAAO,MAAMC,aAAa,GAAIC,KAAD,IAAW;AACpC;;;AAGA,QAAMC,WAAW,GAAGL,MAAM,CAAC,IAAD,CAA1B;AAEA;;;AAEAC,EAAAA,SAAS,CACL,MAAM;AACF,QAAIG,KAAK,CAACE,IAAN,IAAcD,WAAW,CAACE,OAA9B,EAAuC;AACnC,YAAMC,GAAG,GAAGN,EAAE,CAACO,MAAH,CAAUJ,WAAW,CAACE,OAAtB,CAAZ,CADmC,CAGnC;;AACA,YAAMG,MAAM,GAAGF,GAAG,CACbG,MADU,CACH,GADG,EAEVC,SAFU,CAEA,MAFA,EAGVN,IAHU,CAGLF,KAAK,CAACE,IAHD,CAAf,CAJmC,CASnC;;AACAI,MAAAA,MAAM,CAACG,KAAP,GACKF,MADL,CACY,MADZ,EAEKG,IAFL,CAEU,GAFV,EAEe,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,GAAG,EAF7B,EAGKF,IAHL,CAGU,GAHV,EAGe,EAHf,EAIKG,KAJL,CAIW,WAJX,EAIwB,EAJxB,EAKKC,IALL,CAKWH,CAAD,IAAOA,CALjB,EAVmC,CAiBnC;;AACAL,MAAAA,MAAM,CACDI,IADL,CACU,GADV,EACe,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,GAAG,EAD7B,EAEKE,IAFL,CAEWH,CAAD,IAAOA,CAFjB,EAlBmC,CAsBnC;;AACAL,MAAAA,MAAM,CAACS,IAAP,GACKC,MADL;AAEH;AACJ,GA5BI;AA8BL;;;;;;;AAOA,GAAChB,KAAK,CAACE,IAAP,EAAaD,WAAW,CAACE,OAAzB,CArCK,CAAT;AAuCA,sBACI;AACI,IAAA,SAAS,EAAC,cADd;AAEI,IAAA,KAAK,EAAE,GAFX;AAGI,IAAA,MAAM,EAAE,GAHZ;AAII,IAAA,GAAG,EAAEF,WAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAQH,CAvDM;AAyDP;;AACA,OAAO,MAAMgB,KAAK,GAAG,MAAM;AACvB,sBACI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,aAAD;AAAe,IAAA,IAAI,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CANM","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\n\n/* Component */\nexport const MyD3Component = (props) => {\n    /* The useRef Hook creates a variable that \"holds on\" to a value across rendering\n       passes. In this case it will hold our component's SVG DOM element. It's\n       initialized null and React will assign it later (see the return statement) */\n    const d3Container = useRef(null);\n\n    /* The useEffect Hook is for running side effects outside of React,\n       for instance inserting elements into the DOM using D3 */\n    useEffect(\n        () => {\n            if (props.data && d3Container.current) {\n                const svg = d3.select(d3Container.current);\n\n                // Bind D3 data\n                const update = svg\n                    .append('g')\n                    .selectAll('text')\n                    .data(props.data);\n\n                // Enter new D3 elements\n                update.enter()\n                    .append('text')\n                    .attr('x', (d, i) => i * 25)\n                    .attr('y', 40)\n                    .style('font-size', 24)\n                    .text((d) => d);\n\n                // Update existing D3 elements\n                update\n                    .attr('x', (d, i) => i * 40)\n                    .text((d) => d);\n\n                // Remove old D3 elements\n                update.exit()\n                    .remove();\n            }\n        },\n\n        /*\n            useEffect has a dependency array (below). It's a list of dependency\n            variables for this useEffect block. The block will run after mount\n            and whenever any of these variables change. We still have to check\n            if the variables are valid, but we do not have to compare old props\n            to next props to decide whether to rerender.\n        */\n        [props.data, d3Container.current])\n\n    return (\n        <svg\n            className=\"d3-component\"\n            width={400}\n            height={200}\n            ref={d3Container}\n        />\n    );\n}\n\n/* App */\nexport const MyApp = () => {\n    return (\n        <div className=\"my-app\">\n            <MyD3Component data={[1,2,3]}/>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}