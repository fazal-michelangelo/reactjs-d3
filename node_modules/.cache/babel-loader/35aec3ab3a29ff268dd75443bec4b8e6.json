{"ast":null,"code":"var _jsxFileName = \"/home/fazal/Documents/claudius/D3-charts/src/LollipopChart5.js\";\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport { lab } from 'd3';\n\nconst moment = require('moment');\n\nconst LollipopChart = props => {\n  useEffect(() => {\n    drawChart();\n  });\n\n  function drawChart() {\n    // set the dimensions and margins of the graph\n    var margin = {\n      top: 10,\n      right: 30,\n      bottom: 30,\n      left: 60\n    },\n        width = 460 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom; // append the svg object to the body of the page\n\n    var Svg = d3.select(\"#dataviz_brushZoom\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); //Read the data\n\n    d3.csv(\"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/iris.csv\", function (data) {\n      // Add X axis\n      var x = d3.scaleLinear().domain([4, 8]).range([0, width]);\n      var xAxis = Svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); // Add Y axis\n\n      var y = d3.scaleLinear().domain([0, 9]).range([height, 0]);\n      Svg.append(\"g\").call(d3.axisLeft(y)); // Add a clipPath: everything out of this area won't be drawn.\n      // Color scale: give me a specie name, I return a color\n\n      var color = d3.scaleOrdinal().domain([\"setosa\", \"versicolor\", \"virginica\"]).range([\"#440154ff\", \"#21908dff\", \"#fde725ff\"]); // Add brushing\n\n      var brush = d3.brushX() // Add the brush feature using the d3.brush function\n      .extent([[0, 0], [width, height]]) // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area\n      .on(\"end\", updateChart); // Each time the brush selection changes, trigger the 'updateChart' function\n      // Create the scatter variable: where both the circles and the brush take place\n\n      var scatter = Svg.append('g').attr(\"clip-path\", \"url(#clip)\"); // Add circles\n\n      scatter.selectAll(\"circle\").data(data).enter().append(\"circle\").attr(\"cx\", function (d) {\n        return x(d.Sepal_Length);\n      }).attr(\"cy\", function (d) {\n        return y(d.Petal_Length);\n      }).attr(\"r\", 8).style(\"fill\", function (d) {\n        return color(d.Species);\n      }).style(\"opacity\", 0.5); // Add the brushing\n\n      scatter.append(\"g\").attr(\"class\", \"brush\").call(brush); // A function that set idleTimeOut to null\n\n      var idleTimeout;\n\n      function idled() {\n        idleTimeout = null;\n      } // A function that update the chart for given boundaries\n\n\n      function updateChart() {\n        extent = d3.event.selection; // If no selection, back to initial coordinate. Otherwise, update X axis domain\n\n        if (!extent) {\n          if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit\n\n          x.domain([4, 8]);\n        } else {\n          x.domain([x.invert(extent[0]), x.invert(extent[1])]);\n          scatter.select(\".brush\").call(brush.move, null); // This remove the grey brush area as soon as the selection has been done\n        } // Update axis and circle position\n\n\n        xAxis.transition().duration(1000).call(d3.axisBottom(x));\n        scatter.selectAll(\"circle\").transition().duration(1000).attr(\"cx\", function (d) {\n          return x(d.Sepal_Length);\n        }).attr(\"cy\", function (d) {\n          return y(d.Petal_Length);\n        });\n      }\n    });\n  }\n\n  const d3Container = useRef(null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d3-lollipop-chart\",\n    width: 996,\n    height: 444,\n    ref: d3Container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default LollipopChart;","map":{"version":3,"sources":["/home/fazal/Documents/claudius/D3-charts/src/LollipopChart5.js"],"names":["React","useRef","useEffect","d3","lab","moment","require","LollipopChart","props","drawChart","margin","top","right","bottom","left","width","height","Svg","select","append","attr","csv","data","x","scaleLinear","domain","range","xAxis","call","axisBottom","y","axisLeft","color","scaleOrdinal","brush","brushX","extent","on","updateChart","scatter","selectAll","enter","d","Sepal_Length","Petal_Length","style","Species","idleTimeout","idled","event","selection","setTimeout","invert","move","transition","duration","d3Container"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport { lab } from 'd3';\nconst moment = require('moment');\n\n\nconst LollipopChart = (props) => {\n    useEffect(() => {\n        drawChart();\n    });\n\n    function drawChart() {\n\n// set the dimensions and margins of the graph\nvar margin = {top: 10, right: 30, bottom: 30, left: 60},\n    width = 460 - margin.left - margin.right,\n    height = 400 - margin.top - margin.bottom;\n\n// append the svg object to the body of the page\nvar Svg = d3.select(\"#dataviz_brushZoom\")\n  .append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n    .attr(\"transform\",\n          \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n//Read the data\nd3.csv(\"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/iris.csv\", function(data) {\n\n  // Add X axis\n  var x = d3.scaleLinear()\n    .domain([4, 8])\n    .range([ 0, width ]);\n  var xAxis = Svg.append(\"g\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .call(d3.axisBottom(x));\n\n  // Add Y axis\n  var y = d3.scaleLinear()\n    .domain([0, 9])\n    .range([ height, 0]);\n  Svg.append(\"g\")\n    .call(d3.axisLeft(y));\n\n  // Add a clipPath: everything out of this area won't be drawn.\n  \n\n  // Color scale: give me a specie name, I return a color\n  var color = d3.scaleOrdinal()\n    .domain([\"setosa\", \"versicolor\", \"virginica\" ])\n    .range([ \"#440154ff\", \"#21908dff\", \"#fde725ff\"])\n\n  // Add brushing\n  var brush = d3.brushX()                 // Add the brush feature using the d3.brush function\n      .extent( [ [0,0], [width,height] ] ) // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area\n      .on(\"end\", updateChart) // Each time the brush selection changes, trigger the 'updateChart' function\n\n  // Create the scatter variable: where both the circles and the brush take place\n  var scatter = Svg.append('g')\n    .attr(\"clip-path\", \"url(#clip)\")\n\n  // Add circles\n  scatter\n    .selectAll(\"circle\")\n    .data(data)\n    .enter()\n    .append(\"circle\")\n      .attr(\"cx\", function (d) { return x(d.Sepal_Length); } )\n      .attr(\"cy\", function (d) { return y(d.Petal_Length); } )\n      .attr(\"r\", 8)\n      .style(\"fill\", function (d) { return color(d.Species) } )\n      .style(\"opacity\", 0.5)\n\n  // Add the brushing\n  scatter\n    .append(\"g\")\n      .attr(\"class\", \"brush\")\n      .call(brush);\n\n  // A function that set idleTimeOut to null\n  var idleTimeout\n  function idled() { idleTimeout = null; }\n\n  // A function that update the chart for given boundaries\n  function updateChart() {\n\n    extent = d3.event.selection\n\n    // If no selection, back to initial coordinate. Otherwise, update X axis domain\n    if(!extent){\n      if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit\n      x.domain([ 4,8])\n    }else{\n      x.domain([ x.invert(extent[0]), x.invert(extent[1]) ])\n      scatter.select(\".brush\").call(brush.move, null) // This remove the grey brush area as soon as the selection has been done\n    }\n\n    // Update axis and circle position\n    xAxis.transition().duration(1000).call(d3.axisBottom(x))\n    scatter\n      .selectAll(\"circle\")\n      .transition().duration(1000)\n      .attr(\"cx\", function (d) { return x(d.Sepal_Length); } )\n      .attr(\"cy\", function (d) { return y(d.Petal_Length); } )\n\n    }\n\n\n\n})\n\n\n\n    }\n\n    const d3Container = useRef(null);\n\n    return (\n        <div\n            className=\"d3-lollipop-chart\"\n            width={996}\n            height={444}\n            ref={d3Container}\n        ></div>\n    );\n}\n\nexport default LollipopChart;"]},"metadata":{},"sourceType":"module"}