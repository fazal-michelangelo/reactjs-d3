{"ast":null,"code":"var _jsxFileName = \"/home/fazal/Documents/reactjs/inbox-pivot/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport * as d3 from 'd3';\nimport miserableJSON from '../src/miserables.json';\nconst jsondata = miserableJSON;\n\nfunction App() {\n  console.log(jsondata);\n  var width = 800;\n  var height = 600;\n  var color = d3.scaleOrdinal(d3.schemeCategory10); // d3.selection.data(jsondata).then(function (graph) {\n  //   var label = {\n  //     'nodes': [],\n  //     'links': []\n  //   };\n  //   graph.nodes.forEach(function (d, i) {\n  //     label.nodes.push({ node: d });\n  //     label.nodes.push({ node: d });\n  //     label.links.push({\n  //       source: i * 2,\n  //       target: i * 2 + 1\n  //     });\n  //   });\n  //   var labelLayout = d3.forceSimulation(label.nodes)\n  //     .force(\"charge\", d3.forceManyBody().strength(-50))\n  //     .force(\"link\", d3.forceLink(label.links).distance(0).strength(2));\n  //   var graphLayout = d3.forceSimulation(graph.nodes)\n  //     .force(\"charge\", d3.forceManyBody().strength(-3000))\n  //     .force(\"center\", d3.forceCenter(width / 2, height / 2))\n  //     .force(\"x\", d3.forceX(width / 2).strength(1))\n  //     .force(\"y\", d3.forceY(height / 2).strength(1))\n  //     .force(\"link\", d3.forceLink(graph.links).id(function (d) { return d.id; }).distance(50).strength(1))\n  //     .on(\"tick\", ticked);\n  //   var adjlist = [];\n  //   graph.links.forEach(function (d) {\n  //     adjlist[d.source.index + \"-\" + d.target.index] = true;\n  //     adjlist[d.target.index + \"-\" + d.source.index] = true;\n  //   });\n  //   function neigh(a, b) {\n  //     return a == b || adjlist[a + \"-\" + b];\n  //   }\n  //   var svg = d3.select(\"#viz\").attr(\"width\", width).attr(\"height\", height);\n  //   var container = svg.append(\"g\");\n  //   svg.call(\n  //     d3.zoom()\n  //       .scaleExtent([.1, 4])\n  //       .on(\"zoom\", function () { container.attr(\"transform\", d3.event.transform); })\n  //   );\n  //   var link = container.append(\"g\").attr(\"class\", \"links\")\n  //     .selectAll(\"line\")\n  //     .data(graph.links)\n  //     .enter()\n  //     .append(\"line\")\n  //     .attr(\"stroke\", \"#aaa\")\n  //     .attr(\"stroke-width\", \"1px\");\n  //   var node = container.append(\"g\").attr(\"class\", \"nodes\")\n  //     .selectAll(\"g\")\n  //     .data(graph.nodes)\n  //     .enter()\n  //     .append(\"circle\")\n  //     .attr(\"r\", 5)\n  //     .attr(\"fill\", function (d) { return color(d.group); })\n  //   node.on(\"mouseover\", focus).on(\"mouseout\", unfocus);\n  //   node.call(\n  //     d3.drag()\n  //       .on(\"start\", dragstarted)\n  //       .on(\"drag\", dragged)\n  //       .on(\"end\", dragended)\n  //   );\n  //   var labelNode = container.append(\"g\").attr(\"class\", \"labelNodes\")\n  //     .selectAll(\"text\")\n  //     .data(label.nodes)\n  //     .enter()\n  //     .append(\"text\")\n  //     .text(function (d, i) { return i % 2 == 0 ? \"\" : d.node.id; })\n  //     .style(\"fill\", \"#555\")\n  //     .style(\"font-family\", \"Arial\")\n  //     .style(\"font-size\", 12)\n  //     .style(\"pointer-events\", \"none\"); // to prevent mouseover/drag capture\n  //   node.on(\"mouseover\", focus).on(\"mouseout\", unfocus);\n  //   function ticked() {\n  //     node.call(updateNode);\n  //     link.call(updateLink);\n  //     labelLayout.alphaTarget(0.3).restart();\n  //     labelNode.each(function (d, i) {\n  //       if (i % 2 == 0) {\n  //         d.x = d.node.x;\n  //         d.y = d.node.y;\n  //       } else {\n  //         var b = this.getBBox();\n  //         var diffX = d.x - d.node.x;\n  //         var diffY = d.y - d.node.y;\n  //         var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n  //         var shiftX = b.width * (diffX - dist) / (dist * 2);\n  //         shiftX = Math.max(-b.width, Math.min(0, shiftX));\n  //         var shiftY = 16;\n  //         this.setAttribute(\"transform\", \"translate(\" + shiftX + \",\" + shiftY + \")\");\n  //       }\n  //     });\n  //     labelNode.call(updateNode);\n  //   }\n  //   function fixna(x) {\n  //     if (isFinite(x)) return x;\n  //     return 0;\n  //   }\n  //   function focus(d) {\n  //     var index = d3.select(d3.event.target).datum().index;\n  //     node.style(\"opacity\", function (o) {\n  //       return neigh(index, o.index) ? 1 : 0.1;\n  //     });\n  //     labelNode.attr(\"display\", function (o) {\n  //       return neigh(index, o.node.index) ? \"block\" : \"none\";\n  //     });\n  //     link.style(\"opacity\", function (o) {\n  //       return o.source.index == index || o.target.index == index ? 1 : 0.1;\n  //     });\n  //   }\n  //   function unfocus() {\n  //     labelNode.attr(\"display\", \"block\");\n  //     node.style(\"opacity\", 1);\n  //     link.style(\"opacity\", 1);\n  //   }\n  //   function updateLink(link) {\n  //     link.attr(\"x1\", function (d) { return fixna(d.source.x); })\n  //       .attr(\"y1\", function (d) { return fixna(d.source.y); })\n  //       .attr(\"x2\", function (d) { return fixna(d.target.x); })\n  //       .attr(\"y2\", function (d) { return fixna(d.target.y); });\n  //   }\n  //   function updateNode(node) {\n  //     node.attr(\"transform\", function (d) {\n  //       return \"translate(\" + fixna(d.x) + \",\" + fixna(d.y) + \")\";\n  //     });\n  //   }\n  //   function dragstarted(d) {\n  //     d3.event.sourceEvent.stopPropagation();\n  //     if (!d3.event.active) graphLayout.alphaTarget(0.3).restart();\n  //     d.fx = d.x;\n  //     d.fy = d.y;\n  //   }\n  //   function dragged(d) {\n  //     d.fx = d3.event.x;\n  //     d.fy = d3.event.y;\n  //   }\n  //   function dragended(d) {\n  //     if (!d3.event.active) graphLayout.alphaTarget(0);\n  //     d.fx = null;\n  //     d.fy = null;\n  //   }\n  // }); // d3.json\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    id: \"viz\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/fazal/Documents/reactjs/inbox-pivot/src/App.js"],"names":["React","d3","miserableJSON","jsondata","App","console","log","width","height","color","scaleOrdinal","schemeCategory10"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,WAAP;AAEA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AAEA,OAAOC,aAAP,MAA0B,wBAA1B;AAEA,MAAMC,QAAQ,GAAGD,aAAjB;;AAEA,SAASE,GAAT,GAAe;AAEbC,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AAGA,MAAII,KAAK,GAAG,GAAZ;AACA,MAAIC,MAAM,GAAG,GAAb;AACA,MAAIC,KAAK,GAAGR,EAAE,CAACS,YAAH,CAAgBT,EAAE,CAACU,gBAAnB,CAAZ,CAPa,CASbsBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,EAAE,EAAC,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;;AAED,eAAeP,GAAf","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport * as d3 from 'd3';\n\nimport miserableJSON from '../src/miserables.json';\n\nconst jsondata = miserableJSON;\n\nfunction App() {\n\n  console.log(jsondata);\n\n\n  var width = 800;\n  var height = 600;\n  var color = d3.scaleOrdinal(d3.schemeCategory10);\n\n  // d3.selection.data(jsondata).then(function (graph) {\n\n  //   var label = {\n  //     'nodes': [],\n  //     'links': []\n  //   };\n\n  //   graph.nodes.forEach(function (d, i) {\n  //     label.nodes.push({ node: d });\n  //     label.nodes.push({ node: d });\n  //     label.links.push({\n  //       source: i * 2,\n  //       target: i * 2 + 1\n  //     });\n  //   });\n\n  //   var labelLayout = d3.forceSimulation(label.nodes)\n  //     .force(\"charge\", d3.forceManyBody().strength(-50))\n  //     .force(\"link\", d3.forceLink(label.links).distance(0).strength(2));\n\n  //   var graphLayout = d3.forceSimulation(graph.nodes)\n  //     .force(\"charge\", d3.forceManyBody().strength(-3000))\n  //     .force(\"center\", d3.forceCenter(width / 2, height / 2))\n  //     .force(\"x\", d3.forceX(width / 2).strength(1))\n  //     .force(\"y\", d3.forceY(height / 2).strength(1))\n  //     .force(\"link\", d3.forceLink(graph.links).id(function (d) { return d.id; }).distance(50).strength(1))\n  //     .on(\"tick\", ticked);\n\n  //   var adjlist = [];\n\n  //   graph.links.forEach(function (d) {\n  //     adjlist[d.source.index + \"-\" + d.target.index] = true;\n  //     adjlist[d.target.index + \"-\" + d.source.index] = true;\n  //   });\n\n  //   function neigh(a, b) {\n  //     return a == b || adjlist[a + \"-\" + b];\n  //   }\n\n\n  //   var svg = d3.select(\"#viz\").attr(\"width\", width).attr(\"height\", height);\n  //   var container = svg.append(\"g\");\n\n  //   svg.call(\n  //     d3.zoom()\n  //       .scaleExtent([.1, 4])\n  //       .on(\"zoom\", function () { container.attr(\"transform\", d3.event.transform); })\n  //   );\n\n  //   var link = container.append(\"g\").attr(\"class\", \"links\")\n  //     .selectAll(\"line\")\n  //     .data(graph.links)\n  //     .enter()\n  //     .append(\"line\")\n  //     .attr(\"stroke\", \"#aaa\")\n  //     .attr(\"stroke-width\", \"1px\");\n\n  //   var node = container.append(\"g\").attr(\"class\", \"nodes\")\n  //     .selectAll(\"g\")\n  //     .data(graph.nodes)\n  //     .enter()\n  //     .append(\"circle\")\n  //     .attr(\"r\", 5)\n  //     .attr(\"fill\", function (d) { return color(d.group); })\n\n  //   node.on(\"mouseover\", focus).on(\"mouseout\", unfocus);\n\n  //   node.call(\n  //     d3.drag()\n  //       .on(\"start\", dragstarted)\n  //       .on(\"drag\", dragged)\n  //       .on(\"end\", dragended)\n  //   );\n\n  //   var labelNode = container.append(\"g\").attr(\"class\", \"labelNodes\")\n  //     .selectAll(\"text\")\n  //     .data(label.nodes)\n  //     .enter()\n  //     .append(\"text\")\n  //     .text(function (d, i) { return i % 2 == 0 ? \"\" : d.node.id; })\n  //     .style(\"fill\", \"#555\")\n  //     .style(\"font-family\", \"Arial\")\n  //     .style(\"font-size\", 12)\n  //     .style(\"pointer-events\", \"none\"); // to prevent mouseover/drag capture\n\n  //   node.on(\"mouseover\", focus).on(\"mouseout\", unfocus);\n\n  //   function ticked() {\n\n  //     node.call(updateNode);\n  //     link.call(updateLink);\n\n  //     labelLayout.alphaTarget(0.3).restart();\n  //     labelNode.each(function (d, i) {\n  //       if (i % 2 == 0) {\n  //         d.x = d.node.x;\n  //         d.y = d.node.y;\n  //       } else {\n  //         var b = this.getBBox();\n\n  //         var diffX = d.x - d.node.x;\n  //         var diffY = d.y - d.node.y;\n\n  //         var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n\n  //         var shiftX = b.width * (diffX - dist) / (dist * 2);\n  //         shiftX = Math.max(-b.width, Math.min(0, shiftX));\n  //         var shiftY = 16;\n  //         this.setAttribute(\"transform\", \"translate(\" + shiftX + \",\" + shiftY + \")\");\n  //       }\n  //     });\n  //     labelNode.call(updateNode);\n\n  //   }\n\n  //   function fixna(x) {\n  //     if (isFinite(x)) return x;\n  //     return 0;\n  //   }\n\n  //   function focus(d) {\n  //     var index = d3.select(d3.event.target).datum().index;\n  //     node.style(\"opacity\", function (o) {\n  //       return neigh(index, o.index) ? 1 : 0.1;\n  //     });\n  //     labelNode.attr(\"display\", function (o) {\n  //       return neigh(index, o.node.index) ? \"block\" : \"none\";\n  //     });\n  //     link.style(\"opacity\", function (o) {\n  //       return o.source.index == index || o.target.index == index ? 1 : 0.1;\n  //     });\n  //   }\n\n  //   function unfocus() {\n  //     labelNode.attr(\"display\", \"block\");\n  //     node.style(\"opacity\", 1);\n  //     link.style(\"opacity\", 1);\n  //   }\n\n  //   function updateLink(link) {\n  //     link.attr(\"x1\", function (d) { return fixna(d.source.x); })\n  //       .attr(\"y1\", function (d) { return fixna(d.source.y); })\n  //       .attr(\"x2\", function (d) { return fixna(d.target.x); })\n  //       .attr(\"y2\", function (d) { return fixna(d.target.y); });\n  //   }\n\n  //   function updateNode(node) {\n  //     node.attr(\"transform\", function (d) {\n  //       return \"translate(\" + fixna(d.x) + \",\" + fixna(d.y) + \")\";\n  //     });\n  //   }\n\n  //   function dragstarted(d) {\n  //     d3.event.sourceEvent.stopPropagation();\n  //     if (!d3.event.active) graphLayout.alphaTarget(0.3).restart();\n  //     d.fx = d.x;\n  //     d.fy = d.y;\n  //   }\n\n  //   function dragged(d) {\n  //     d.fx = d3.event.x;\n  //     d.fy = d3.event.y;\n  //   }\n\n  //   function dragended(d) {\n  //     if (!d3.event.active) graphLayout.alphaTarget(0);\n  //     d.fx = null;\n  //     d.fy = null;\n  //   }\n\n  // }); // d3.json\n\n\n\n\n  return (\n    <div className=\"App\">\n      <svg id='viz'></svg>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}