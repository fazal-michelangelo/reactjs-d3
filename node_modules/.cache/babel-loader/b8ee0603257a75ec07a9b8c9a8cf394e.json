{"ast":null,"code":"var _jsxFileName = \"/home/fazal/Documents/claudius/D3-charts/src/LollipopChart5.js\";\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport { lab } from 'd3';\n\nconst moment = require('moment');\n\nconst LollipopChart = props => {\n  useEffect(() => {\n    drawChart();\n  });\n\n  function drawChart() {\n    var margin = {\n      top: 10,\n      right: 30,\n      bottom: 30,\n      left: 60\n    },\n        width = 460 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom; // append the svg object to the body of the page\n\n    var svg = d3.select(d3Container.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); //Read the data\n\n    d3.csv(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered_comma.csv\", // When reading the csv, I must format variables:\n    function (d) {\n      return {\n        date: d3.timeParse(\"%Y-%m-%d\")(d.date),\n        value: d.value\n      };\n    }, // Now I can use this dataset:\n    function (data) {\n      // Add X axis --> it is a date format\n      var x = d3.scaleTime().domain(d3.extent(data, function (d) {\n        return d.date;\n      })).range([0, width]);\n      var xAxis = svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); // Add Y axis\n\n      var y = d3.scaleLinear().domain([0, d3.max(data, function (d) {\n        return +d.value;\n      })]).range([height, 0]);\n      yAxis = svg.append(\"g\").call(d3.axisLeft(y)); // Add a clipPath: everything out of this area won't be drawn.\n\n      var clip = svg.append(\"defs\").append(\"svg:clipPath\").attr(\"id\", \"clip\").append(\"svg:rect\").attr(\"width\", width).attr(\"height\", height).attr(\"x\", 0).attr(\"y\", 0); // Add brushing\n\n      var brush = d3.brushX() // Add the brush feature using the d3.brush function\n      .extent([[0, 0], [width, height]]) // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area\n      .on(\"end\", updateChart); // Each time the brush selection changes, trigger the 'updateChart' function\n      // Create the line variable: where both the line and the brush take place\n\n      var line = svg.append('g').attr(\"clip-path\", \"url(#clip)\"); // Add the line\n\n      line.append(\"path\").datum(data).attr(\"class\", \"line\") // I add the class line to be able to modify this line later on.\n      .attr(\"fill\", \"none\").attr(\"stroke\", \"steelblue\").attr(\"stroke-width\", 1.5).attr(\"d\", d3.line().x(function (d) {\n        return x(d.date);\n      }).y(function (d) {\n        return y(d.value);\n      })); // Add the brushing\n\n      line.append(\"g\").attr(\"class\", \"brush\").call(brush); // A function that set idleTimeOut to null\n\n      var idleTimeout;\n\n      function idled() {\n        idleTimeout = null;\n      } // A function that update the chart for given boundaries\n\n\n      function updateChart() {\n        // What are the selected boundaries?\n        extent = d3.event.selection; // If no selection, back to initial coordinate. Otherwise, update X axis domain\n\n        if (!extent) {\n          if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit\n\n          x.domain([4, 8]);\n        } else {\n          x.domain([x.invert(extent[0]), x.invert(extent[1])]);\n          line.select(\".brush\").call(brush.move, null); // This remove the grey brush area as soon as the selection has been done\n        } // Update axis and line position\n\n\n        xAxis.transition().duration(1000).call(d3.axisBottom(x));\n        line.select('.line').transition().duration(1000).attr(\"d\", d3.line().x(function (d) {\n          return x(d.date);\n        }).y(function (d) {\n          return y(d.value);\n        }));\n      } // If user double click, reinitialize the chart\n\n\n      svg.on(\"dblclick\", function () {\n        x.domain(d3.extent(data, function (d) {\n          return d.date;\n        }));\n        xAxis.transition().call(d3.axisBottom(x));\n        line.select('.line').transition().attr(\"d\", d3.line().x(function (d) {\n          return x(d.date);\n        }).y(function (d) {\n          return y(d.value);\n        }));\n      });\n    });\n  }\n\n  const d3Container = useRef(null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d3-lollipop-chart\",\n    width: 996,\n    height: 444,\n    ref: d3Container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default LollipopChart;","map":{"version":3,"sources":["/home/fazal/Documents/claudius/D3-charts/src/LollipopChart5.js"],"names":["React","useRef","useEffect","d3","lab","moment","require","LollipopChart","props","drawChart","margin","top","right","bottom","left","width","height","svg","select","d3Container","current","append","attr","csv","d","date","timeParse","value","data","x","scaleTime","domain","extent","range","xAxis","call","axisBottom","y","scaleLinear","max","yAxis","axisLeft","clip","brush","brushX","on","updateChart","line","datum","idleTimeout","idled","event","selection","setTimeout","invert","move","transition","duration"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport { lab } from 'd3';\nconst moment = require('moment');\n\n\nconst LollipopChart = (props) => {\n    useEffect(() => {\n        drawChart();\n    });\n\n    function drawChart() {\n        var margin = { top: 10, right: 30, bottom: 30, left: 60 },\n            width = 460 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n\n        // append the svg object to the body of the page\n        var svg = d3.select(d3Container.current)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        //Read the data\n        d3.csv(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered_comma.csv\",\n\n            // When reading the csv, I must format variables:\n            function (d) {\n                return { date: d3.timeParse(\"%Y-%m-%d\")(d.date), value: d.value }\n            },\n\n            // Now I can use this dataset:\n            function (data) {\n\n                // Add X axis --> it is a date format\n                var x = d3.scaleTime()\n                    .domain(d3.extent(data, function (d) { return d.date; }))\n                    .range([0, width]);\n                var xAxis = svg.append(\"g\")\n                    .attr(\"transform\", \"translate(0,\" + height + \")\")\n                    .call(d3.axisBottom(x));\n\n                // Add Y axis\n                var y = d3.scaleLinear()\n                    .domain([0, d3.max(data, function (d) { return +d.value; })])\n                    .range([height, 0]);\n                yAxis = svg.append(\"g\")\n                    .call(d3.axisLeft(y));\n\n                // Add a clipPath: everything out of this area won't be drawn.\n                var clip = svg.append(\"defs\").append(\"svg:clipPath\")\n                    .attr(\"id\", \"clip\")\n                    .append(\"svg:rect\")\n                    .attr(\"width\", width)\n                    .attr(\"height\", height)\n                    .attr(\"x\", 0)\n                    .attr(\"y\", 0);\n\n                // Add brushing\n                var brush = d3.brushX()                   // Add the brush feature using the d3.brush function\n                    .extent([[0, 0], [width, height]])  // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area\n                    .on(\"end\", updateChart)               // Each time the brush selection changes, trigger the 'updateChart' function\n\n                // Create the line variable: where both the line and the brush take place\n                var line = svg.append('g')\n                    .attr(\"clip-path\", \"url(#clip)\")\n\n                // Add the line\n                line.append(\"path\")\n                    .datum(data)\n                    .attr(\"class\", \"line\")  // I add the class line to be able to modify this line later on.\n                    .attr(\"fill\", \"none\")\n                    .attr(\"stroke\", \"steelblue\")\n                    .attr(\"stroke-width\", 1.5)\n                    .attr(\"d\", d3.line()\n                        .x(function (d) { return x(d.date) })\n                        .y(function (d) { return y(d.value) })\n                    )\n\n                // Add the brushing\n                line\n                    .append(\"g\")\n                    .attr(\"class\", \"brush\")\n                    .call(brush);\n\n                // A function that set idleTimeOut to null\n                var idleTimeout\n                function idled() { idleTimeout = null; }\n\n                // A function that update the chart for given boundaries\n                function updateChart() {\n\n                    // What are the selected boundaries?\n                    extent = d3.event.selection\n\n                    // If no selection, back to initial coordinate. Otherwise, update X axis domain\n                    if (!extent) {\n                        if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit\n                        x.domain([4, 8])\n                    } else {\n                        x.domain([x.invert(extent[0]), x.invert(extent[1])])\n                        line.select(\".brush\").call(brush.move, null) // This remove the grey brush area as soon as the selection has been done\n                    }\n\n                    // Update axis and line position\n                    xAxis.transition().duration(1000).call(d3.axisBottom(x))\n                    line\n                        .select('.line')\n                        .transition()\n                        .duration(1000)\n                        .attr(\"d\", d3.line()\n                            .x(function (d) { return x(d.date) })\n                            .y(function (d) { return y(d.value) })\n                        )\n                }\n\n                // If user double click, reinitialize the chart\n                svg.on(\"dblclick\", function () {\n                    x.domain(d3.extent(data, function (d) { return d.date; }))\n                    xAxis.transition().call(d3.axisBottom(x))\n                    line\n                        .select('.line')\n                        .transition()\n                        .attr(\"d\", d3.line()\n                            .x(function (d) { return x(d.date) })\n                            .y(function (d) { return y(d.value) })\n                        )\n                });\n\n            })\n\n    }\n\n    const d3Container = useRef(null);\n\n    return (\n        <div\n            className=\"d3-lollipop-chart\"\n            width={996}\n            height={444}\n            ref={d3Container}\n        ></div>\n    );\n}\n\nexport default LollipopChart;"]},"metadata":{},"sourceType":"module"}